<?php

/**
 * @file
 * Courier Service Express shipping module main file.
 */

/**
 * Implementation of hook_menu().
 */
function commerce_cse_menu() {
	$items = array();

	$items['admin/commerce/config/shipping/methods/cse/edit'] = array(
		'title' => 'Edit',
		'description' => 'Configure the CSE shipping method.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('commerce_cse_settings_form'),
		'access arguments' => array('administer shipping'),
		'file' => 'commerce_cse.admin.inc',
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_INLINE,
		'weight' => 0,
	);

	return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_cse_commerce_shipping_method_info() {
	$shipping_methods = array();

	$shipping_methods['cse'] = array(
		'title' => t('Courier Service Express shipping method'),
		'description' => t('Courier Service Express shipping method.'),
	);

	return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_cse_commerce_shipping_service_info() {
	$shipping_services = array();

	$shipping_services['cse_shipping_service'] = array(
		'title' => t('Courier Service Express shipping service'),
		'description' => t('Courier Service Express.'),
		'display_title' => t('Courier Service Express'),
		'shipping_method' => 'cse',
		'price_component' => 'shipping',
		'callbacks' => array(
			'rate' => 'commerce_cse_service_rate',
		),
	);

	return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_cse_service_rate($shipping_service, $order) {

	$profile_id = $order->commerce_customer_billing['und'][0]['profile_id'];
	$customer = commerce_customer_profile_load($profile_id);

	$region_id = $customer->field_region['und'][0]['tid'];
	$shipping_region = taxonomy_term_load($region_id);

	$shipping_address_code = $shipping_region->field_code;

	$total_weight = 0;
	$default_weight = variable_get('commerce_cse_default_weight', 0);

	$total_weight = commerce_physical_order_weight($order, 'kg');	// this returns $total_weight['unit'] and $total_weight['weight']

	$store_address_code = variable_get('commerce_cse_store_address_code', '');

	$user = variable_get('commerce_cse_account_id', '');

	$password = variable_get('commerce_cse_password', '');

	$urgencie_code = variable_get('commerce_cse_urgencie_code', '');

	$type_of_cargo_code = variable_get('commerce_cse_type_of_cargo_code', '');

	$reply = drupal_http_request('http://emspost.ru/api/rest?method=ems.calculate&from='. $from .'&to='. $to .'&weight=' . $total_weight['weight'] . '&type=att');

	if (taxonomy_get_parents($region_id)->name == 'Ростовская обл' ){
		$service_code = variable_get('commerce_cse_service_region_delivery', '');
	}
	else {
		$service_code = variable_get('commerce_cse_service_country_delivery', '');
	}

	$reply = drupal_http_request('https://service.cse-cargo.ru/JSONWebService.asmx/Calculator?login=' . $user . '&password=' . $password . ' &from=' . $shipping_address_code . '&to=' . $store_address_code . '&typeOfCargo=' . $type_of_cargo_code . '&urgency=' . $urgencie_code . '&service=' . $service_code . '&weight=' . $total_weight . '&qty=1');



	if ($reply->code == 200) {
		$cse_result = json_decode($reply->data);
		$cse_result_tariffs = $cse_result->tariffs;
	} else {
		$cse_result_tariffs = new StdClass();
		$fixed = variable_get('commerce_cse_fixed_price', 0);
		if ($fixed) {
			$cse_result_tariffs->total = $fixed;
		} else {
			// return no quotes for CSE
			drupal_set_message(t('CSE website is down, so we can\'t calculate the delivery price. Try to call us. Sorry for the inconvenience!'), 'error');
			return array();
		}
	}

	if ($cse_result->error == 'true') {
		watchdog('cse', $cse_result->errorInfo, array(), WATCHDOG_ERROR);
		return array();
	}


	if ($shipping_region->name == 'Другой') {
		if ($total_weight['weight'] < 0.5) {
			$region_extra_charge = 380;
		}
		else {
			$region_extra_charge = ceil($total_weight['weight'])*48 + 372;
		}
		$cse_result_tariffs->total += $region_extra_charge;
	}

	$extra_charge = (int) variable_get('commerce_cse_extra_charge', 0);

	// Extra charge not added if request failed, as in that case fixed price
	// can be used
	if ($extra_charge && ($reply->code == 200)) {
		$charge_type = variable_get('commerce_cse_extra_charge_type', 'percent');
		if ($charge_type == 'percent') {
			$cse_result_tariffs->total += ($cse_result_tariffs->total * 0.01 * $extra_charge);
		} else {
			// fixed amount
			$cse_result_tariffs->total += $extra_charge;
		}
	}

	$cse_result_tariffs->total = ceil($cse_result_tariffs->total / 10) * 10;

	return array(
		'amount' => commerce_currency_decimal_to_amount($cse_result_tariffs->total, 'RUB'),
		'currency_code' => 'RUB',
		'data' => array(),
	);
}
